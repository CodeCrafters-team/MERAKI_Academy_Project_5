{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 55, "column": 0}, "map": {"version":3,"sources":["file:///D:/MERAKI_Academy/projects/MERAKI_Academy_Project_5_forked/src/app/lib/db/index.ts"],"sourcesContent":["import { Pool } from \"pg\";\r\n\r\nconst connectionString = process.env.connectionString;\r\n\r\nconst pool = new Pool({\r\n  // the line below is equivalent to connectionString: connectionString,\r\n  connectionString,\r\n});\r\n// check the connection \r\npool.connect().then(()=>{\r\n  console.log('connected to the database');\r\n}).catch(() => {\r\n  console.error('connection to the database failed');\r\n});\r\n\r\n\r\nexport default pool;"],"names":[],"mappings":";;;;AAAA;;;;;;AAEA,MAAM,mBAAmB,QAAQ,GAAG,CAAC,gBAAgB;AAErD,MAAM,OAAO,IAAI,4GAAI,CAAC;IACpB,sEAAsE;IACtE;AACF;AACA,wBAAwB;AACxB,KAAK,OAAO,GAAG,IAAI,CAAC;IAClB,QAAQ,GAAG,CAAC;AACd,GAAG,KAAK,CAAC;IACP,QAAQ,KAAK,CAAC;AAChB;uCAGe","debugId":null}},
    {"offset": {"line": 84, "column": 0}, "map": {"version":3,"sources":["file:///D:/MERAKI_Academy/projects/MERAKI_Academy_Project_5_forked/src/app/lib/db/Services/users.ts"],"sourcesContent":["import pool from \"../index\";\r\n\r\n\r\nexport const getAllUsers =  ()=>{\r\nconst res =  pool.query('SELECT * FROM users').then(res => res).catch(err => {throw err});\r\nreturn res;\r\n}"],"names":[],"mappings":";;;;AAAA;;;;;;AAGO,MAAM,cAAe;IAC5B,MAAM,MAAO,6IAAI,CAAC,KAAK,CAAC,uBAAuB,IAAI,CAAC,CAAA,MAAO,KAAK,KAAK,CAAC,CAAA;QAAQ,MAAM;IAAG;IACvF,OAAO;AACP","debugId":null}},
    {"offset": {"line": 119, "column": 0}, "map": {"version":3,"sources":["file:///D:/MERAKI_Academy/projects/MERAKI_Academy_Project_5_forked/src/app/api/users/route.ts"],"sourcesContent":["import { getAllUsers } from \"@/app/lib/db/Services/users\";\nimport { NextResponse } from \"next/server\";\n\nexport const GET = async () => {\n  debugger;\n  try {\n    const res = await getAllUsers();\n    return NextResponse.json(res, { status: 200 });\n  } catch (error) {\n    console.error(\"GET /api/users failed:\", error);\n    return NextResponse.json(\n      { message: \"Failed to fetch users\" },\n      { status: 500 }\n    );\n  }\n};\n"],"names":[],"mappings":";;;;AAAA;AACA;;;;;;;AAEO,MAAM,MAAM;IACjB,QAAS;IACT,IAAI;QACF,MAAM,MAAM,MAAM,IAAA,6JAAW;QAC7B,OAAO,gJAAY,CAAC,IAAI,CAAC,KAAK;YAAE,QAAQ;QAAI;IAC9C,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,0BAA0B;QACxC,OAAO,gJAAY,CAAC,IAAI,CACtB;YAAE,SAAS;QAAwB,GACnC;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}